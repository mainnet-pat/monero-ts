"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _index = require("../../index");
var _TestSampleCode = _interopRequireDefault(require("./TestSampleCode"));
var _TestMoneroUtils = _interopRequireDefault(require("./TestMoneroUtils"));
var _TestMoneroDaemonRpc = _interopRequireDefault(require("./TestMoneroDaemonRpc"));
var _TestMoneroWalletKeys = _interopRequireDefault(require("./TestMoneroWalletKeys"));
var _TestMoneroWalletFull = _interopRequireDefault(require("./TestMoneroWalletFull"));
var _TestMoneroWalletRpc = _interopRequireDefault(require("./TestMoneroWalletRpc"));
var _TestMoneroConnectionManager = _interopRequireDefault(require("./TestMoneroConnectionManager")); // import test types

// set log level
_index.LibraryUtils.setLogLevel(1); // no need for await before worker used

// test sample code for readme
new _TestSampleCode.default().runTests();

// test utilitiles
new _TestMoneroUtils.default().runTests();

// test daemon rpc
new _TestMoneroDaemonRpc.default({
  liteMode: false, // skip lengthy but thorough tests if true
  testNonRelays: true,
  testRelays: true, // creates and relays outgoing txs
  testNotifications: true
}).runTests();

// test keys-only wallet
new _TestMoneroWalletKeys.default({
  liteMode: false,
  testNonRelays: true,
  testRelays: false,
  testNotifications: false,
  testResets: false
}).runTests();

// test full wallet
new _TestMoneroWalletFull.default({
  liteMode: false,
  testNonRelays: true,
  testRelays: true,
  testNotifications: true,
  testResets: false
}).runTests();

// test wallet rpc
new _TestMoneroWalletRpc.default({
  liteMode: false,
  testNonRelays: true,
  testRelays: true,
  testNotifications: true,
  testResets: false
}).runTests();

// test connection manager
new _TestMoneroConnectionManager.default().runTests();

// test scratchpad
require("./Scratchpad");
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW5kZXgiLCJyZXF1aXJlIiwiX1Rlc3RTYW1wbGVDb2RlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9UZXN0TW9uZXJvVXRpbHMiLCJfVGVzdE1vbmVyb0RhZW1vblJwYyIsIl9UZXN0TW9uZXJvV2FsbGV0S2V5cyIsIl9UZXN0TW9uZXJvV2FsbGV0RnVsbCIsIl9UZXN0TW9uZXJvV2FsbGV0UnBjIiwiX1Rlc3RNb25lcm9Db25uZWN0aW9uTWFuYWdlciIsIkxpYnJhcnlVdGlscyIsInNldExvZ0xldmVsIiwiVGVzdFNhbXBsZUNvZGUiLCJydW5UZXN0cyIsIlRlc3RNb25lcm9VdGlscyIsIlRlc3RNb25lcm9EYWVtb25ScGMiLCJsaXRlTW9kZSIsInRlc3ROb25SZWxheXMiLCJ0ZXN0UmVsYXlzIiwidGVzdE5vdGlmaWNhdGlvbnMiLCJUZXN0TW9uZXJvV2FsbGV0S2V5cyIsInRlc3RSZXNldHMiLCJUZXN0TW9uZXJvV2FsbGV0RnVsbCIsIlRlc3RNb25lcm9XYWxsZXRScGMiLCJUZXN0TW9uZXJvQ29ubmVjdGlvbk1hbmFnZXIiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdGVzdC9UZXN0QWxsLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGltcG9ydCB0ZXN0IHR5cGVzXG5pbXBvcnQge0xpYnJhcnlVdGlsc30gZnJvbSBcIi4uLy4uL2luZGV4XCI7XG5pbXBvcnQgVGVzdFNhbXBsZUNvZGUgZnJvbSBcIi4vVGVzdFNhbXBsZUNvZGVcIjtcbmltcG9ydCBUZXN0TW9uZXJvVXRpbHMgZnJvbSBcIi4vVGVzdE1vbmVyb1V0aWxzXCI7XG5pbXBvcnQgVGVzdE1vbmVyb0RhZW1vblJwYyBmcm9tIFwiLi9UZXN0TW9uZXJvRGFlbW9uUnBjXCI7XG5pbXBvcnQgVGVzdE1vbmVyb1dhbGxldEtleXMgZnJvbSBcIi4vVGVzdE1vbmVyb1dhbGxldEtleXNcIjtcbmltcG9ydCBUZXN0TW9uZXJvV2FsbGV0RnVsbCBmcm9tIFwiLi9UZXN0TW9uZXJvV2FsbGV0RnVsbFwiO1xuaW1wb3J0IFRlc3RNb25lcm9XYWxsZXRScGMgZnJvbSBcIi4vVGVzdE1vbmVyb1dhbGxldFJwY1wiO1xuaW1wb3J0IFRlc3RNb25lcm9Db25uZWN0aW9uTWFuYWdlciBmcm9tIFwiLi9UZXN0TW9uZXJvQ29ubmVjdGlvbk1hbmFnZXJcIjtcblxuLy8gc2V0IGxvZyBsZXZlbFxuTGlicmFyeVV0aWxzLnNldExvZ0xldmVsKDEpOyAvLyBubyBuZWVkIGZvciBhd2FpdCBiZWZvcmUgd29ya2VyIHVzZWRcblxuLy8gdGVzdCBzYW1wbGUgY29kZSBmb3IgcmVhZG1lXG5uZXcgVGVzdFNhbXBsZUNvZGUoKS5ydW5UZXN0cygpO1xuXG4vLyB0ZXN0IHV0aWxpdGlsZXNcbm5ldyBUZXN0TW9uZXJvVXRpbHMoKS5ydW5UZXN0cygpO1xuXG4vLyB0ZXN0IGRhZW1vbiBycGNcbm5ldyBUZXN0TW9uZXJvRGFlbW9uUnBjKHtcbiAgbGl0ZU1vZGU6IGZhbHNlLCAgLy8gc2tpcCBsZW5ndGh5IGJ1dCB0aG9yb3VnaCB0ZXN0cyBpZiB0cnVlXG4gIHRlc3ROb25SZWxheXM6IHRydWUsXG4gIHRlc3RSZWxheXM6IHRydWUsIC8vIGNyZWF0ZXMgYW5kIHJlbGF5cyBvdXRnb2luZyB0eHNcbiAgdGVzdE5vdGlmaWNhdGlvbnM6IHRydWVcbn0pLnJ1blRlc3RzKCk7XG5cbi8vIHRlc3Qga2V5cy1vbmx5IHdhbGxldFxubmV3IFRlc3RNb25lcm9XYWxsZXRLZXlzKHtcbiAgbGl0ZU1vZGU6IGZhbHNlLFxuICB0ZXN0Tm9uUmVsYXlzOiB0cnVlLFxuICB0ZXN0UmVsYXlzOiBmYWxzZSxcbiAgdGVzdE5vdGlmaWNhdGlvbnM6IGZhbHNlLFxuICB0ZXN0UmVzZXRzOiBmYWxzZVxufSkucnVuVGVzdHMoKTtcblxuLy8gdGVzdCBmdWxsIHdhbGxldFxubmV3IFRlc3RNb25lcm9XYWxsZXRGdWxsKHtcbiAgbGl0ZU1vZGU6IGZhbHNlLFxuICB0ZXN0Tm9uUmVsYXlzOiB0cnVlLFxuICB0ZXN0UmVsYXlzOiB0cnVlLFxuICB0ZXN0Tm90aWZpY2F0aW9uczogdHJ1ZSxcbiAgdGVzdFJlc2V0czogZmFsc2Vcbn0pLnJ1blRlc3RzKCk7XG5cbi8vIHRlc3Qgd2FsbGV0IHJwY1xubmV3IFRlc3RNb25lcm9XYWxsZXRScGMoe1xuICBsaXRlTW9kZTogZmFsc2UsXG4gIHRlc3ROb25SZWxheXM6IHRydWUsXG4gIHRlc3RSZWxheXM6IHRydWUsXG4gIHRlc3ROb3RpZmljYXRpb25zOiB0cnVlLFxuICB0ZXN0UmVzZXRzOiBmYWxzZVxufSkucnVuVGVzdHMoKTtcblxuLy8gdGVzdCBjb25uZWN0aW9uIG1hbmFnZXJcbm5ldyBUZXN0TW9uZXJvQ29ubmVjdGlvbk1hbmFnZXIoKS5ydW5UZXN0cygpO1xuXG4vLyB0ZXN0IHNjcmF0Y2hwYWRcbnJlcXVpcmUoXCIuL1NjcmF0Y2hwYWRcIik7XG4iXSwibWFwcGluZ3MiOiI7QUFDQSxJQUFBQSxNQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxlQUFBLEdBQUFDLHNCQUFBLENBQUFGLE9BQUE7QUFDQSxJQUFBRyxnQkFBQSxHQUFBRCxzQkFBQSxDQUFBRixPQUFBO0FBQ0EsSUFBQUksb0JBQUEsR0FBQUYsc0JBQUEsQ0FBQUYsT0FBQTtBQUNBLElBQUFLLHFCQUFBLEdBQUFILHNCQUFBLENBQUFGLE9BQUE7QUFDQSxJQUFBTSxxQkFBQSxHQUFBSixzQkFBQSxDQUFBRixPQUFBO0FBQ0EsSUFBQU8sb0JBQUEsR0FBQUwsc0JBQUEsQ0FBQUYsT0FBQTtBQUNBLElBQUFRLDRCQUFBLEdBQUFOLHNCQUFBLENBQUFGLE9BQUEsbUNBQXdFLENBUnhFOztBQVVBO0FBQ0FTLG1CQUFZLENBQUNDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDOztBQUU3QjtBQUNBLElBQUlDLHVCQUFjLENBQUMsQ0FBQyxDQUFDQyxRQUFRLENBQUMsQ0FBQzs7QUFFL0I7QUFDQSxJQUFJQyx3QkFBZSxDQUFDLENBQUMsQ0FBQ0QsUUFBUSxDQUFDLENBQUM7O0FBRWhDO0FBQ0EsSUFBSUUsNEJBQW1CLENBQUM7RUFDdEJDLFFBQVEsRUFBRSxLQUFLLEVBQUc7RUFDbEJDLGFBQWEsRUFBRSxJQUFJO0VBQ25CQyxVQUFVLEVBQUUsSUFBSSxFQUFFO0VBQ2xCQyxpQkFBaUIsRUFBRTtBQUNyQixDQUFDLENBQUMsQ0FBQ04sUUFBUSxDQUFDLENBQUM7O0FBRWI7QUFDQSxJQUFJTyw2QkFBb0IsQ0FBQztFQUN2QkosUUFBUSxFQUFFLEtBQUs7RUFDZkMsYUFBYSxFQUFFLElBQUk7RUFDbkJDLFVBQVUsRUFBRSxLQUFLO0VBQ2pCQyxpQkFBaUIsRUFBRSxLQUFLO0VBQ3hCRSxVQUFVLEVBQUU7QUFDZCxDQUFDLENBQUMsQ0FBQ1IsUUFBUSxDQUFDLENBQUM7O0FBRWI7QUFDQSxJQUFJUyw2QkFBb0IsQ0FBQztFQUN2Qk4sUUFBUSxFQUFFLEtBQUs7RUFDZkMsYUFBYSxFQUFFLElBQUk7RUFDbkJDLFVBQVUsRUFBRSxJQUFJO0VBQ2hCQyxpQkFBaUIsRUFBRSxJQUFJO0VBQ3ZCRSxVQUFVLEVBQUU7QUFDZCxDQUFDLENBQUMsQ0FBQ1IsUUFBUSxDQUFDLENBQUM7O0FBRWI7QUFDQSxJQUFJVSw0QkFBbUIsQ0FBQztFQUN0QlAsUUFBUSxFQUFFLEtBQUs7RUFDZkMsYUFBYSxFQUFFLElBQUk7RUFDbkJDLFVBQVUsRUFBRSxJQUFJO0VBQ2hCQyxpQkFBaUIsRUFBRSxJQUFJO0VBQ3ZCRSxVQUFVLEVBQUU7QUFDZCxDQUFDLENBQUMsQ0FBQ1IsUUFBUSxDQUFDLENBQUM7O0FBRWI7QUFDQSxJQUFJVyxvQ0FBMkIsQ0FBQyxDQUFDLENBQUNYLFFBQVEsQ0FBQyxDQUFDOztBQUU1QztBQUNBWixPQUFPLENBQUMsY0FBYyxDQUFDIn0=