"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;
var _TestUtils = _interopRequireDefault(require("./utils/TestUtils"));
var _WalletEqualityUtils = _interopRequireDefault(require("./utils/WalletEqualityUtils"));
var _TestMoneroWalletCommon = _interopRequireDefault(require("./TestMoneroWalletCommon"));
var _index = require("../../index");

/**
 * Tests the implementation of MoneroWallet which only manages keys using WebAssembly.
 */
class TestMoneroWalletKeys extends _TestMoneroWalletCommon.default {

  constructor(config) {
    super(config);
  }

  async beforeAll() {
    await super.beforeAll();
  }

  async beforeEach(currentTest) {
    await super.beforeEach(currentTest);
  }

  async afterAll() {
    console.log("After all");
    await this.wallet.close();
  }

  async afterEach(currentTest) {
    await super.afterEach(currentTest);
  }

  async getTestWallet() {
    return _TestUtils.default.getWalletKeys();
  }

  async getTestDaemon() {
    return await _TestUtils.default.getDaemonRpc();
  }

  async openWallet(config) {
    throw new Error("TestMoneroWalletKeys.openWallet(config) not applicable, use createWallet()");
  }

  async createWallet(config) {

    // assign defaults
    config = new _index.MoneroWalletConfig(config);
    if (!config.getPassword()) config.setPassword(_TestUtils.default.WALLET_PASSWORD);
    if (config.getNetworkType() === undefined) config.setNetworkType(_TestUtils.default.NETWORK_TYPE);
    if (config.getServer()) throw new Error("Cannot initialize keys wallet with connection");

    // create wallet
    return await (0, _index.createWalletKeys)(config);
  }

  async closeWallet(wallet, save) {
    await wallet.close(save);
  }

  async getSeedLanguages() {
    return await _index.MoneroWalletKeys.getSeedLanguages();
  }

  runTests() {
    let that = this;
    describe("TEST MONERO WALLET KEYS", function () {

      // register handlers to run before and after tests
      before(async function () {await that.beforeAll();});
      beforeEach(async function () {await that.beforeEach(this.currentTest);});
      after(async function () {await that.afterAll();});
      afterEach(async function () {await that.afterEach(this.currentTest);});

      // run tests specific to keys wallet
      that.testWalletKeys();

      // run common tests
      that.runCommonTests();
    });
  }

  // ---------------------------------- PRIVATE -------------------------------

  testWalletKeys() {
    let that = this;
    let config = this.testConfig;
    let daemon = this.daemon;

    describe("Tests specific to keys wallet", function () {

      it("Has the same keys as the RPC wallet", async function () {
        await _WalletEqualityUtils.default.testWalletEqualityKeys(await _TestUtils.default.getWalletRpc(), await that.getTestWallet());
      });

      it("Has the same keys as the RPC wallet with a seed offset", async function () {

        // use common offset to compare wallet implementations
        let seedOffset = "my super secret offset!";

        // create rpc wallet with offset
        let walletRpc = await _TestUtils.default.getWalletRpc();
        await walletRpc.createWallet({ path: _index.GenUtils.getUUID(), password: _TestUtils.default.WALLET_PASSWORD, seed: await walletRpc.getSeed(), restoreHeight: _TestUtils.default.FIRST_RECEIVE_HEIGHT, seedOffset: seedOffset });

        // create keys-only wallet with offset
        let walletKeys = await (0, _index.createWalletKeys)({
          networkType: _TestUtils.default.NETWORK_TYPE,
          seed: _TestUtils.default.SEED,
          seedOffset: seedOffset
        });

        // deep compare
        await _WalletEqualityUtils.default.testWalletEqualityKeys(walletRpc, walletKeys);
      });

      it("Can get the address of a specified account and subaddress index", async function () {
        for (let accountIdx = 0; accountIdx < 5; accountIdx++) {
          for (let subaddressIdx = 0; subaddressIdx < 5; subaddressIdx++) {
            await _index.MoneroUtils.validateAddress(await that.wallet.getAddress(accountIdx, subaddressIdx), _TestUtils.default.NETWORK_TYPE);
          }
        }
      });
    });
  }
}exports.default = TestMoneroWalletKeys;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,