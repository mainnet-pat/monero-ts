"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _TestUtils = _interopRequireDefault(require("./utils/TestUtils"));
var _WalletSyncPrinter = _interopRequireDefault(require("./utils/WalletSyncPrinter"));
var _index = require("../../index");




describe("Scratchpad", function () {

  it("Can be scripted easily", async function () {

    //    let daemon = await TestUtils.getDaemonRpc();
    //    let walletRpc = await TestUtils.getWalletRpc();
    //    let walletFull = await TestUtils.getWalletFull();

    // initialize daemon rpc client
    let daemon = await (0, _index.connectToDaemonRpc)({
      uri: "http://localhost:28081",
      username: "superuser",
      password: "abctesting123",
      proxyToWorker: _TestUtils.default.PROXY_TO_WORKER,
      rejectUnauthorized: false
    });
    console.log("Daemon height: " + (await daemon.getHeight()));

    // initialize wallet rpc client
    let walletRpc = await (0, _index.connectToWalletRpc)({
      uri: "http://localhost:28084",
      username: "rpc_user",
      password: "abc123",
      rejectUnauthorized: false
    });
    await walletRpc.openWallet("test_wallet_1", "supersecretpassword123");
    console.log("RPC wallet seed: " + (await walletRpc.getSeed()));

    // create in-memory wallet with mnemonic
    let walletFull = await (0, _index.createWalletFull)({
      //path: "./test_wallets/" + GenUtils.getUUID(), // in-memory wallet if not given
      password: "supersecretpassword123",
      networkType: _index.MoneroNetworkType.TESTNET,
      server: {
        uri: "http://localhost:28081",
        username: "superuser",
        password: "abctesting123",
        rejectUnauthorized: false
      },
      seed: "silk mocked cucumber lettuce hope adrenalin aching lush roles fuel revamp baptism wrist long tender teardrop midst pastry pigment equip frying inbound pinched ravine frying",
      restoreHeight: 0,
      proxyToWorker: _TestUtils.default.PROXY_TO_WORKER
    });
    await walletFull.sync(new _WalletSyncPrinter.default());
    console.log("Full wallet daemon height: " + (await walletFull.getDaemonHeight()));
    console.log("Full wallet seed: " + (await walletFull.getSeed()));
    console.log("Wallet balance: " + (await walletFull.getUnlockedBalance()).toString());
    await walletFull.close();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfVGVzdFV0aWxzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfV2FsbGV0U3luY1ByaW50ZXIiLCJfaW5kZXgiLCJkZXNjcmliZSIsIml0IiwiZGFlbW9uIiwiY29ubmVjdFRvRGFlbW9uUnBjIiwidXJpIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsInByb3h5VG9Xb3JrZXIiLCJUZXN0VXRpbHMiLCJQUk9YWV9UT19XT1JLRVIiLCJyZWplY3RVbmF1dGhvcml6ZWQiLCJjb25zb2xlIiwibG9nIiwiZ2V0SGVpZ2h0Iiwid2FsbGV0UnBjIiwiY29ubmVjdFRvV2FsbGV0UnBjIiwib3BlbldhbGxldCIsImdldFNlZWQiLCJ3YWxsZXRGdWxsIiwiY3JlYXRlV2FsbGV0RnVsbCIsIm5ldHdvcmtUeXBlIiwiTW9uZXJvTmV0d29ya1R5cGUiLCJURVNUTkVUIiwic2VydmVyIiwic2VlZCIsInJlc3RvcmVIZWlnaHQiLCJzeW5jIiwiV2FsbGV0U3luY1ByaW50ZXIiLCJnZXREYWVtb25IZWlnaHQiLCJnZXRVbmxvY2tlZEJhbGFuY2UiLCJ0b1N0cmluZyIsImNsb3NlIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3Rlc3QvU2NyYXRjaHBhZC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVGVzdFV0aWxzIGZyb20gXCIuL3V0aWxzL1Rlc3RVdGlsc1wiO1xuaW1wb3J0IFdhbGxldFN5bmNQcmludGVyIGZyb20gXCIuL3V0aWxzL1dhbGxldFN5bmNQcmludGVyXCI7XG5pbXBvcnQge2Nvbm5lY3RUb0RhZW1vblJwYyxcbiAgICAgICAgY29ubmVjdFRvV2FsbGV0UnBjLFxuICAgICAgICBjcmVhdGVXYWxsZXRGdWxsLFxuICAgICAgICBNb25lcm9OZXR3b3JrVHlwZX0gZnJvbSBcIi4uLy4uL2luZGV4XCI7XG5cbmRlc2NyaWJlKFwiU2NyYXRjaHBhZFwiLCBmdW5jdGlvbigpIHtcbiAgXG4gIGl0KFwiQ2FuIGJlIHNjcmlwdGVkIGVhc2lseVwiLCBhc3luYyBmdW5jdGlvbigpIHtcbiAgICBcbi8vICAgIGxldCBkYWVtb24gPSBhd2FpdCBUZXN0VXRpbHMuZ2V0RGFlbW9uUnBjKCk7XG4vLyAgICBsZXQgd2FsbGV0UnBjID0gYXdhaXQgVGVzdFV0aWxzLmdldFdhbGxldFJwYygpO1xuLy8gICAgbGV0IHdhbGxldEZ1bGwgPSBhd2FpdCBUZXN0VXRpbHMuZ2V0V2FsbGV0RnVsbCgpO1xuICAgIFxuICAgIC8vIGluaXRpYWxpemUgZGFlbW9uIHJwYyBjbGllbnRcbiAgICBsZXQgZGFlbW9uID0gYXdhaXQgY29ubmVjdFRvRGFlbW9uUnBjKHtcbiAgICAgIHVyaTogXCJodHRwOi8vbG9jYWxob3N0OjI4MDgxXCIsXG4gICAgICB1c2VybmFtZTogXCJzdXBlcnVzZXJcIixcbiAgICAgIHBhc3N3b3JkOiBcImFiY3Rlc3RpbmcxMjNcIixcbiAgICAgIHByb3h5VG9Xb3JrZXI6IFRlc3RVdGlscy5QUk9YWV9UT19XT1JLRVIsXG4gICAgICByZWplY3RVbmF1dGhvcml6ZWQ6IGZhbHNlXG4gICAgfSk7XG4gICAgY29uc29sZS5sb2coXCJEYWVtb24gaGVpZ2h0OiBcIiArIGF3YWl0IGRhZW1vbi5nZXRIZWlnaHQoKSk7XG4gICAgXG4gICAgLy8gaW5pdGlhbGl6ZSB3YWxsZXQgcnBjIGNsaWVudFxuICAgIGxldCB3YWxsZXRScGMgPSBhd2FpdCBjb25uZWN0VG9XYWxsZXRScGMoe1xuICAgICAgdXJpOiBcImh0dHA6Ly9sb2NhbGhvc3Q6MjgwODRcIixcbiAgICAgIHVzZXJuYW1lOiBcInJwY191c2VyXCIsXG4gICAgICBwYXNzd29yZDogXCJhYmMxMjNcIixcbiAgICAgIHJlamVjdFVuYXV0aG9yaXplZDogZmFsc2VcbiAgICB9KTtcbiAgICBhd2FpdCB3YWxsZXRScGMub3BlbldhbGxldChcInRlc3Rfd2FsbGV0XzFcIiwgXCJzdXBlcnNlY3JldHBhc3N3b3JkMTIzXCIpO1xuICAgIGNvbnNvbGUubG9nKFwiUlBDIHdhbGxldCBzZWVkOiBcIiArIGF3YWl0IHdhbGxldFJwYy5nZXRTZWVkKCkpO1xuICAgIFxuICAgIC8vIGNyZWF0ZSBpbi1tZW1vcnkgd2FsbGV0IHdpdGggbW5lbW9uaWNcbiAgICBsZXQgd2FsbGV0RnVsbCA9IGF3YWl0IGNyZWF0ZVdhbGxldEZ1bGwoe1xuICAgICAgLy9wYXRoOiBcIi4vdGVzdF93YWxsZXRzL1wiICsgR2VuVXRpbHMuZ2V0VVVJRCgpLCAvLyBpbi1tZW1vcnkgd2FsbGV0IGlmIG5vdCBnaXZlblxuICAgICAgcGFzc3dvcmQ6IFwic3VwZXJzZWNyZXRwYXNzd29yZDEyM1wiLFxuICAgICAgbmV0d29ya1R5cGU6IE1vbmVyb05ldHdvcmtUeXBlLlRFU1RORVQsXG4gICAgICBzZXJ2ZXI6IHtcbiAgICAgICAgdXJpOiBcImh0dHA6Ly9sb2NhbGhvc3Q6MjgwODFcIixcbiAgICAgICAgdXNlcm5hbWU6IFwic3VwZXJ1c2VyXCIsXG4gICAgICAgIHBhc3N3b3JkOiBcImFiY3Rlc3RpbmcxMjNcIixcbiAgICAgICAgcmVqZWN0VW5hdXRob3JpemVkOiBmYWxzZVxuICAgICAgfSxcbiAgICAgIHNlZWQ6IFwic2lsayBtb2NrZWQgY3VjdW1iZXIgbGV0dHVjZSBob3BlIGFkcmVuYWxpbiBhY2hpbmcgbHVzaCByb2xlcyBmdWVsIHJldmFtcCBiYXB0aXNtIHdyaXN0IGxvbmcgdGVuZGVyIHRlYXJkcm9wIG1pZHN0IHBhc3RyeSBwaWdtZW50IGVxdWlwIGZyeWluZyBpbmJvdW5kIHBpbmNoZWQgcmF2aW5lIGZyeWluZ1wiLFxuICAgICAgcmVzdG9yZUhlaWdodDogMCxcbiAgICAgIHByb3h5VG9Xb3JrZXI6IFRlc3RVdGlscy5QUk9YWV9UT19XT1JLRVIsIFxuICAgIH0pO1xuICAgIGF3YWl0IHdhbGxldEZ1bGwuc3luYyhuZXcgV2FsbGV0U3luY1ByaW50ZXIoKSk7XG4gICAgY29uc29sZS5sb2coXCJGdWxsIHdhbGxldCBkYWVtb24gaGVpZ2h0OiBcIiArIGF3YWl0IHdhbGxldEZ1bGwuZ2V0RGFlbW9uSGVpZ2h0KCkpO1xuICAgIGNvbnNvbGUubG9nKFwiRnVsbCB3YWxsZXQgc2VlZDogXCIgKyBhd2FpdCB3YWxsZXRGdWxsLmdldFNlZWQoKSk7XG4gICAgY29uc29sZS5sb2coXCJXYWxsZXQgYmFsYW5jZTogXCIgKyAoYXdhaXQgd2FsbGV0RnVsbC5nZXRVbmxvY2tlZEJhbGFuY2UoKSkudG9TdHJpbmcoKSkgXG4gICAgYXdhaXQgd2FsbGV0RnVsbC5jbG9zZSgpO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoia0dBQUEsSUFBQUEsVUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsa0JBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLE1BQUEsR0FBQUYsT0FBQTs7Ozs7QUFLQUcsUUFBUSxDQUFDLFlBQVksRUFBRSxZQUFXOztFQUVoQ0MsRUFBRSxDQUFDLHdCQUF3QixFQUFFLGtCQUFpQjs7SUFFaEQ7SUFDQTtJQUNBOztJQUVJO0lBQ0EsSUFBSUMsTUFBTSxHQUFHLE1BQU0sSUFBQUMseUJBQWtCLEVBQUM7TUFDcENDLEdBQUcsRUFBRSx3QkFBd0I7TUFDN0JDLFFBQVEsRUFBRSxXQUFXO01BQ3JCQyxRQUFRLEVBQUUsZUFBZTtNQUN6QkMsYUFBYSxFQUFFQyxrQkFBUyxDQUFDQyxlQUFlO01BQ3hDQyxrQkFBa0IsRUFBRTtJQUN0QixDQUFDLENBQUM7SUFDRkMsT0FBTyxDQUFDQyxHQUFHLENBQUMsaUJBQWlCLElBQUcsTUFBTVYsTUFBTSxDQUFDVyxTQUFTLENBQUMsQ0FBQyxFQUFDOztJQUV6RDtJQUNBLElBQUlDLFNBQVMsR0FBRyxNQUFNLElBQUFDLHlCQUFrQixFQUFDO01BQ3ZDWCxHQUFHLEVBQUUsd0JBQXdCO01BQzdCQyxRQUFRLEVBQUUsVUFBVTtNQUNwQkMsUUFBUSxFQUFFLFFBQVE7TUFDbEJJLGtCQUFrQixFQUFFO0lBQ3RCLENBQUMsQ0FBQztJQUNGLE1BQU1JLFNBQVMsQ0FBQ0UsVUFBVSxDQUFDLGVBQWUsRUFBRSx3QkFBd0IsQ0FBQztJQUNyRUwsT0FBTyxDQUFDQyxHQUFHLENBQUMsbUJBQW1CLElBQUcsTUFBTUUsU0FBUyxDQUFDRyxPQUFPLENBQUMsQ0FBQyxFQUFDOztJQUU1RDtJQUNBLElBQUlDLFVBQVUsR0FBRyxNQUFNLElBQUFDLHVCQUFnQixFQUFDO01BQ3RDO01BQ0FiLFFBQVEsRUFBRSx3QkFBd0I7TUFDbENjLFdBQVcsRUFBRUMsd0JBQWlCLENBQUNDLE9BQU87TUFDdENDLE1BQU0sRUFBRTtRQUNObkIsR0FBRyxFQUFFLHdCQUF3QjtRQUM3QkMsUUFBUSxFQUFFLFdBQVc7UUFDckJDLFFBQVEsRUFBRSxlQUFlO1FBQ3pCSSxrQkFBa0IsRUFBRTtNQUN0QixDQUFDO01BQ0RjLElBQUksRUFBRSw4S0FBOEs7TUFDcExDLGFBQWEsRUFBRSxDQUFDO01BQ2hCbEIsYUFBYSxFQUFFQyxrQkFBUyxDQUFDQztJQUMzQixDQUFDLENBQUM7SUFDRixNQUFNUyxVQUFVLENBQUNRLElBQUksQ0FBQyxJQUFJQywwQkFBaUIsQ0FBQyxDQUFDLENBQUM7SUFDOUNoQixPQUFPLENBQUNDLEdBQUcsQ0FBQyw2QkFBNkIsSUFBRyxNQUFNTSxVQUFVLENBQUNVLGVBQWUsQ0FBQyxDQUFDLEVBQUM7SUFDL0VqQixPQUFPLENBQUNDLEdBQUcsQ0FBQyxvQkFBb0IsSUFBRyxNQUFNTSxVQUFVLENBQUNELE9BQU8sQ0FBQyxDQUFDLEVBQUM7SUFDOUROLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLGtCQUFrQixHQUFHLENBQUMsTUFBTU0sVUFBVSxDQUFDVyxrQkFBa0IsQ0FBQyxDQUFDLEVBQUVDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDcEYsTUFBTVosVUFBVSxDQUFDYSxLQUFLLENBQUMsQ0FBQztFQUMxQixDQUFDLENBQUM7QUFDSixDQUFDLENBQUMifQ==