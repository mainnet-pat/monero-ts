"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _assert = _interopRequireDefault(require("assert"));
var _TestUtils = _interopRequireDefault(require("./utils/TestUtils"));
var _index = require("../../index");







/**
 * Test the Monero RPC connection manager.
 */
class TestMoneroConnectionManager {

  runTests() {
    describe("Test connection manager", function () {
      it("Can manage connections", async function () {
        let err;
        let walletRpcs = [];
        let connectionManager;
        try {

          // start monero-wallet-rpc instances as test server connections (can also use monerod servers)
          for (let i = 0; i < 5; i++) walletRpcs.push(await _TestUtils.default.startWalletRpcProcess());

          // create connection manager
          connectionManager = new _index.MoneroConnectionManager();

          // listen for changes
          let listener = new ConnectionChangeCollector();
          connectionManager.addListener(listener);

          // add prioritized connections
          await connectionManager.addConnection(walletRpcs[4].getRpcConnection().setPriority(1));
          await connectionManager.addConnection(walletRpcs[2].getRpcConnection().setPriority(2));
          await connectionManager.addConnection(walletRpcs[3].getRpcConnection().setPriority(2));
          await connectionManager.addConnection(walletRpcs[0].getRpcConnection()); // default priority is lowest
          await connectionManager.addConnection(new _index.MoneroRpcConnection(walletRpcs[1].getRpcConnection().getUri())); // test unauthenticated

          // test connections and order
          let orderedConnections = connectionManager.getConnections();
          (0, _assert.default)(orderedConnections[0] === walletRpcs[4].getRpcConnection());
          (0, _assert.default)(orderedConnections[1] === walletRpcs[2].getRpcConnection());
          (0, _assert.default)(orderedConnections[2] === walletRpcs[3].getRpcConnection());
          (0, _assert.default)(orderedConnections[3] === walletRpcs[0].getRpcConnection());
          _assert.default.equal(orderedConnections[4].getUri(), walletRpcs[1].getRpcConnection().getUri());
          for (let connection of orderedConnections) _assert.default.equal(undefined, connection.getIsOnline());

          // test getting connection by uri
          (0, _assert.default)(connectionManager.hasConnection(walletRpcs[0].getRpcConnection().getUri()));
          (0, _assert.default)(connectionManager.getConnectionByUri(walletRpcs[0].getRpcConnection().getUri()) === walletRpcs[0].getRpcConnection());

          // test unknown connection
          let numExpectedChanges = 0;
          await connectionManager.setConnection(orderedConnections[0]);
          _assert.default.equal(connectionManager.isConnected(), undefined);
          _assert.default.equal(listener.changedConnections.length, ++numExpectedChanges);

          // auto connect to best available connection
          connectionManager.startPolling(_TestUtils.default.SYNC_PERIOD_IN_MS);
          await _index.GenUtils.waitFor(_TestUtils.default.AUTO_CONNECT_TIMEOUT_MS);
          (0, _assert.default)(connectionManager.isConnected());
          let connection = connectionManager.getConnection();
          (0, _assert.default)(connection.getIsOnline());
          (0, _assert.default)(connection === walletRpcs[4].getRpcConnection());
          _assert.default.equal(listener.changedConnections.length, ++numExpectedChanges);
          (0, _assert.default)(listener.changedConnections[listener.changedConnections.length - 1] === connection);
          connectionManager.setAutoSwitch(false);
          connectionManager.stopPolling();
          await connectionManager.disconnect();
          _assert.default.equal(listener.changedConnections.length, ++numExpectedChanges);
          (0, _assert.default)(listener.changedConnections[listener.changedConnections.length - 1] === undefined);

          // start periodically checking connection without auto switch
          await connectionManager.startPolling(_TestUtils.default.SYNC_PERIOD_IN_MS, false);

          // connect to best available connection in order of priority and response time
          connection = await connectionManager.getBestAvailableConnection();
          await connectionManager.setConnection(connection);
          (0, _assert.default)(connection === walletRpcs[4].getRpcConnection());
          (0, _assert.default)(connection.getIsOnline());
          (0, _assert.default)(connection.getIsAuthenticated());
          _assert.default.equal(listener.changedConnections.length, ++numExpectedChanges);
          (0, _assert.default)(listener.changedConnections[listener.changedConnections.length - 1] === connection);

          // test connections and order
          orderedConnections = connectionManager.getConnections();
          (0, _assert.default)(orderedConnections[0] === walletRpcs[4].getRpcConnection());
          (0, _assert.default)(orderedConnections[1] === walletRpcs[2].getRpcConnection());
          (0, _assert.default)(orderedConnections[2] === walletRpcs[3].getRpcConnection());
          (0, _assert.default)(orderedConnections[3] === walletRpcs[0].getRpcConnection());
          _assert.default.equal(orderedConnections[4].getUri(), walletRpcs[1].getRpcConnection().getUri());
          for (let i = 1; i < orderedConnections.length; i++) _assert.default.equal(undefined, orderedConnections[i].getIsOnline());

          // shut down prioritized servers
          walletRpcs[2].getRpcConnection().setFakeDisconnected(true); // browser does not start or stop instances
          walletRpcs[3].getRpcConnection().setFakeDisconnected(true);
          walletRpcs[4].getRpcConnection().setFakeDisconnected(true);
          await _index.GenUtils.waitFor(_TestUtils.default.SYNC_PERIOD_IN_MS + 100);
          _assert.default.equal(false, connectionManager.isConnected());
          _assert.default.equal(false, connectionManager.getConnection().getIsOnline());
          _assert.default.equal(undefined, connectionManager.getConnection().getIsAuthenticated());
          _assert.default.equal(listener.changedConnections.length, ++numExpectedChanges);
          (0, _assert.default)(listener.changedConnections[listener.changedConnections.length - 1] === connectionManager.getConnection());

          // test connection order
          orderedConnections = connectionManager.getConnections();
          (0, _assert.default)(orderedConnections[0] === walletRpcs[4].getRpcConnection());
          (0, _assert.default)(orderedConnections[1] === walletRpcs[0].getRpcConnection());
          _assert.default.equal(orderedConnections[2].getUri(), walletRpcs[1].getRpcConnection().getUri());
          (0, _assert.default)(orderedConnections[3] === walletRpcs[2].getRpcConnection());
          (0, _assert.default)(orderedConnections[4] === walletRpcs[3].getRpcConnection());

          // check all connections
          await connectionManager.checkConnections();

          // test connection order
          orderedConnections = connectionManager.getConnections();
          (0, _assert.default)(orderedConnections[0] === walletRpcs[4].getRpcConnection());
          (0, _assert.default)(orderedConnections[1] === walletRpcs[0].getRpcConnection());
          (0, _assert.default)(orderedConnections[2].getUri() === walletRpcs[1].getRpcConnection().getUri());
          (0, _assert.default)(orderedConnections[3] === walletRpcs[2].getRpcConnection());
          (0, _assert.default)(orderedConnections[4] === walletRpcs[3].getRpcConnection());

          // test online and authentication status
          for (let i = 0; i < orderedConnections.length; i++) {
            let isOnline = orderedConnections[i].getIsOnline();
            let isAuthenticated = orderedConnections[i].getIsAuthenticated();
            if (i === 1 || i === 2) _assert.default.equal(true, isOnline);else
            _assert.default.equal(false, isOnline);
            if (i === 1) _assert.default.equal(true, isAuthenticated);else
            if (i === 2) _assert.default.equal(false, isAuthenticated);else
            _assert.default.equal(undefined, isAuthenticated);
          }

          // test auto switch when disconnected
          connectionManager.setAutoSwitch(true);
          await _index.GenUtils.waitFor(_TestUtils.default.SYNC_PERIOD_IN_MS + 100); // allow time to poll
          (0, _assert.default)(connectionManager.isConnected());
          connection = connectionManager.getConnection();
          (0, _assert.default)(connection.getIsOnline());
          (0, _assert.default)(connection === walletRpcs[0].getRpcConnection());
          _assert.default.equal(listener.changedConnections.length, ++numExpectedChanges);
          (0, _assert.default)(listener.changedConnections[listener.changedConnections.length - 1] === connection);

          // test connection order
          orderedConnections = connectionManager.getConnections();
          (0, _assert.default)(orderedConnections[0] === connection);
          (0, _assert.default)(orderedConnections[0] === walletRpcs[0].getRpcConnection());
          (0, _assert.default)(orderedConnections[1].getUri() === walletRpcs[1].getRpcConnection().getUri());
          (0, _assert.default)(orderedConnections[2] === walletRpcs[4].getRpcConnection());
          (0, _assert.default)(orderedConnections[3] === walletRpcs[2].getRpcConnection());
          (0, _assert.default)(orderedConnections[4] === walletRpcs[3].getRpcConnection());

          // connect to specific endpoint without authentication
          connection = orderedConnections[1];
          _assert.default.equal(false, connection.getIsAuthenticated());
          await connectionManager.setConnection(connection);
          _assert.default.equal(false, connectionManager.isConnected());
          _assert.default.equal(listener.changedConnections.length, ++numExpectedChanges);

          // connect to specific endpoint with authentication
          connectionManager.setAutoSwitch(false);
          orderedConnections[1].setCredentials("rpc_user", "abc123");
          await connectionManager.checkConnection();
          _assert.default.equal(connection.getUri(), walletRpcs[1].getRpcConnection().getUri());
          (0, _assert.default)(connection.getIsOnline());
          (0, _assert.default)(connection.getIsAuthenticated());
          _assert.default.equal(listener.changedConnections.length, ++numExpectedChanges);
          (0, _assert.default)(listener.changedConnections[listener.changedConnections.length - 1] === connection);

          // test connection order
          orderedConnections = connectionManager.getConnections();
          (0, _assert.default)(orderedConnections[0] === connectionManager.getConnection());
          _assert.default.equal(orderedConnections[0].getUri(), walletRpcs[1].getRpcConnection().getUri());
          (0, _assert.default)(orderedConnections[1] === walletRpcs[0].getRpcConnection());
          (0, _assert.default)(orderedConnections[2] === walletRpcs[4].getRpcConnection());
          (0, _assert.default)(orderedConnections[3] === walletRpcs[2].getRpcConnection());
          (0, _assert.default)(orderedConnections[4] === walletRpcs[3].getRpcConnection());
          for (let i = 0; i < orderedConnections.length; i++) (0, _assert.default)(i <= 1 ? orderedConnections[i].getIsOnline() : !orderedConnections[i].getIsOnline());

          // set connection to existing uri
          await connectionManager.setConnection(walletRpcs[0].getRpcConnection().getUri());
          (0, _assert.default)(connectionManager.isConnected());
          (0, _assert.default)(walletRpcs[0].getRpcConnection() === connectionManager.getConnection());
          _assert.default.equal(_TestUtils.default.WALLET_RPC_CONFIG.username, connectionManager.getConnection().getUsername());
          _assert.default.equal(_TestUtils.default.WALLET_RPC_CONFIG.password, connectionManager.getConnection().getPassword());
          _assert.default.equal(listener.changedConnections.length, ++numExpectedChanges);
          (0, _assert.default)(listener.changedConnections[listener.changedConnections.length - 1] === walletRpcs[0].getRpcConnection());

          // set connection to new uri
          connectionManager.stopPolling();
          let uri = "http://localhost:49999";
          await connectionManager.setConnection(uri);
          _assert.default.equal(connectionManager.getConnection().getUri(), uri);
          _assert.default.equal(listener.changedConnections.length, ++numExpectedChanges);
          _assert.default.equal(uri, listener.changedConnections[listener.changedConnections.length - 1].getUri());

          // set connection to empty string
          await connectionManager.setConnection("");
          _assert.default.equal(undefined, connectionManager.getConnection());
          _assert.default.equal(listener.changedConnections.length, ++numExpectedChanges);

          // check all connections and test auto switch
          connectionManager.setAutoSwitch(true);
          await connectionManager.checkConnections();
          _assert.default.equal(listener.changedConnections.length, ++numExpectedChanges);
          (0, _assert.default)(connectionManager.isConnected());

          // remove current connection and test auto switch
          await connectionManager.removeConnection(connectionManager.getConnection().getUri());
          _assert.default.equal(listener.changedConnections.length, ++numExpectedChanges);
          _assert.default.equal(connectionManager.isConnected(), false);
          await connectionManager.checkConnections();
          _assert.default.equal(listener.changedConnections.length, ++numExpectedChanges);
          (0, _assert.default)(connectionManager.isConnected());

          // check connection promises
          await Promise.all(connectionManager.checkConnectionPromises());

          // test polling current connection
          await connectionManager.setConnection();
          _assert.default.equal(connectionManager.isConnected(), false);
          _assert.default.equal(listener.changedConnections.length, ++numExpectedChanges);
          connectionManager.startPolling(_TestUtils.default.SYNC_PERIOD_IN_MS, undefined, undefined, _index.MoneroConnectionManager.PollType.CURRENT, undefined);
          await _index.GenUtils.waitFor(_TestUtils.default.AUTO_CONNECT_TIMEOUT_MS);
          (0, _assert.default)(connectionManager.isConnected());
          _assert.default.equal(listener.changedConnections.length, ++numExpectedChanges);

          // test polling all connections
          await connectionManager.setConnection();
          _assert.default.equal(listener.changedConnections.length, ++numExpectedChanges);
          connectionManager.startPolling(_TestUtils.default.SYNC_PERIOD_IN_MS, undefined, undefined, _index.MoneroConnectionManager.PollType.ALL, undefined);
          await _index.GenUtils.waitFor(_TestUtils.default.AUTO_CONNECT_TIMEOUT_MS);
          (0, _assert.default)(connectionManager.isConnected());
          _assert.default.equal(listener.changedConnections.length, ++numExpectedChanges);

          // shut down all connections
          connection = connectionManager.getConnection();
          for (let connection of orderedConnections) connection.setFakeDisconnected(true);
          await _index.GenUtils.waitFor(_TestUtils.default.SYNC_PERIOD_IN_MS + 100);
          _assert.default.equal(false, connection.getIsOnline());
          _assert.default.equal(listener.changedConnections.length, ++numExpectedChanges);
          (0, _assert.default)(listener.changedConnections[listener.changedConnections.length - 1] === connection);

          // reset
          connectionManager.reset();
          _assert.default.equal(connectionManager.getConnections().length, 0);
          _assert.default.equal(connectionManager.getConnection(), undefined);
        } catch (err2) {
          err = err2;
        }

        // stop connection manager
        if (connectionManager) connectionManager.reset();

        // stop monero-wallet-rpc instances
        for (let walletRpc of walletRpcs) {
          try {await _TestUtils.default.stopWalletRpcProcess(walletRpc);}
          catch (err2) {}
        }

        // throw error if applicable
        if (err) throw err;
      });
    });
  }
}

class ConnectionChangeCollector extends _index.MoneroConnectionManagerListener {

  changedConnections = [];

  constructor() {
    super();
    this.changedConnections = [];
  }
  async onConnectionChanged(connection) {
    this.changedConnections.push(connection);
  }
}var _default = exports.default =

TestMoneroConnectionManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,