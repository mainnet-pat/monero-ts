"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _assert = _interopRequireDefault(require("assert"));
var _index = require("../../index");




/**
 * Test utilities including those implemented in WebAssembly.
 */
class TestMoneroUtils {

  runTests() {
    describe("TEST MONERO UTILITIES", function () {

      // initialize utils to test
      before(async function () {
        _index.MoneroUtils.setProxyToWorker(true);
      });

      it("Can get integrated addresses", async function () {
        let primaryAddress = "58qRVVjZ4KxMX57TH6yWqGcH5AswvZZS494hWHcHPt6cDkP7V8AqxFhi3RKXZueVRgUnk8niQGHSpY5Bm9DjuWn16GDKXpF";
        let subaddress = "7B9w2xieXjhDumgPX39h1CAYELpsZ7Pe8Wqtr3pVL9jJ5gGDqgxjWt55gTYUCAuhahhM85ajEp6VbQfLDPETt4oT2ZRXa6n";
        let paymentId = "03284e41c342f036";
        let networkType = _index.MoneroNetworkType.STAGENET;

        // get integrated address with randomly generated payment id
        let integratedAddress = await _index.MoneroUtils.getIntegratedAddress(networkType, primaryAddress);
        _assert.default.equal(primaryAddress, integratedAddress.getStandardAddress());
        _assert.default.equal(16, integratedAddress.getPaymentId().length);
        _assert.default.equal(106, integratedAddress.getIntegratedAddress().length);

        // get integrated address with specific payment id
        integratedAddress = await _index.MoneroUtils.getIntegratedAddress(networkType, primaryAddress, paymentId);
        _assert.default.equal(primaryAddress, integratedAddress.getStandardAddress());
        _assert.default.equal(paymentId, integratedAddress.getPaymentId());
        _assert.default.equal(106, integratedAddress.getIntegratedAddress().length);

        // get integrated address with subaddress
        integratedAddress = await _index.MoneroUtils.getIntegratedAddress(networkType, subaddress, paymentId);
        _assert.default.equal(subaddress, integratedAddress.getStandardAddress());
        _assert.default.equal(paymentId, integratedAddress.getPaymentId());
        _assert.default.equal(106, integratedAddress.getIntegratedAddress().length);

        // get integrated address with invalid payment id
        try {
          await _index.MoneroUtils.getIntegratedAddress(networkType, primaryAddress, "123");
          throw new Error("Getting integrated address with invalid payment id should have failed");
        } catch (err) {
          (0, _assert.default)(err instanceof _index.MoneroError);
          _assert.default.equal("Invalid payment id", err.message);
        }
      });

      it("Can serialize heights with small numbers", async function () {
        let json = { heights: [111, 222, 333] };
        let binary = await _index.MoneroUtils.jsonToBinary(json);
        (0, _assert.default)(binary);
        let json2 = await _index.MoneroUtils.binaryToJson(binary);
        _assert.default.deepEqual(json2, json);
      });

      it("Can serialize heights with big numbers", async function () {
        let json = { heights: [123456, 1234567, 870987] };
        let binary = await _index.MoneroUtils.jsonToBinary(json);
        (0, _assert.default)(binary);
        let json2 = await _index.MoneroUtils.binaryToJson(binary);
        _assert.default.deepEqual(json2, json);
      });

      it("Can serialize json with text", async function () {
        let json = { msg: 'Hello there my good man lets make a nice long text to test with lots of exclamation marks!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!' };
        let binary = await _index.MoneroUtils.jsonToBinary(json);
        (0, _assert.default)(binary);
        let json2 = await _index.MoneroUtils.binaryToJson(binary);
        _assert.default.deepEqual(json2, json);
      });

      it("Can serialize json with long text", async function () {
        let json = { msg: 'Hello there my good man lets make a nice long text to test with lots of exclamation marks!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n' +
          'Hello there my good man lets make a nice long text to test with lots of exclamation marks!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n' +
          'Hello there my good man lets make a nice long text to test with lots of exclamation marks!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n' +
          'Hello there my good man lets make a nice long text to test with lots of exclamation marks!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n' +
          'Hello there my good man lets make a nice long text to test with lots of exclamation marks!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n' +
          'Hello there my good man lets make a nice long text to test with lots of exclamation marks!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n' +
          'Hello there my good man lets make a nice long text to test with lots of exclamation marks!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n' +
          'Hello there my good man lets make a nice long text to test with lots of exclamation marks!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n' +
          'Hello there my good man lets make a nice long text to test with lots of exclamation marks!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n' +
          'Hello there my good man lets make a nice long text to test with lots of exclamation marks!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n' +
          'Hello there my good man lets make a nice long text to test with lots of exclamation marks!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n' +
          'Hello there my good man lets make a nice long text to test with lots of exclamation marks!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n' +
          'Hello there my good man lets make a nice long text to test with lots of exclamation marks!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n' +
          'Hello there my good man lets make a nice long text to test with lots of exclamation marks!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n' };
        let binary = await _index.MoneroUtils.jsonToBinary(json);
        (0, _assert.default)(binary);
        let json2 = await _index.MoneroUtils.binaryToJson(binary);
        _assert.default.deepEqual(json2, json);
      });

      it("Can validate addresses", async function () {

        // test mainnet primary address validation
        (0, _assert.default)(await _index.MoneroUtils.isValidAddress("42U9v3qs5CjZEePHBZHwuSckQXebuZu299NSmVEmQ41YJZQhKcPyujyMSzpDH4VMMVSBo3U3b54JaNvQLwAjqDhKS3rvM3L", _index.MoneroNetworkType.MAINNET));
        (0, _assert.default)(await _index.MoneroUtils.isValidAddress("48ZxX3Y2y5s4nJ8fdz2w65TrTEp9PRsv5J8iHSShkHQcE2V31FhnWptioNst1K9oeDY4KpWZ7v8V2BZNVa4Wdky89iqmPz2", _index.MoneroNetworkType.MAINNET));
        (0, _assert.default)(await _index.MoneroUtils.isValidAddress("48W972Fx1SQMCHVKENnPpM7tRcL5oWMgpMCqQDbhH8UrjDFg2H9i5AQWXuU1qacJgUUCVLTsgDmZKXGz1vPLXY8QB5ypYqG", _index.MoneroNetworkType.MAINNET));

        // test mainnet integrated address validation
        await _index.MoneroUtils.validateAddress("4CApvrfMgUFZEePHBZHwuSckQXebuZu299NSmVEmQ41YJZQhKcPyujyMSzpDH4VMMVSBo3U3b54JaNvQLwAjqDhKeGLQ9vfRBRKFKnBtVH", _index.MoneroNetworkType.MAINNET);
        await _index.MoneroUtils.validateAddress("4JGdXrMXaMP4nJ8fdz2w65TrTEp9PRsv5J8iHSShkHQcE2V31FhnWptioNst1K9oeDY4KpWZ7v8V2BZNVa4Wdky8DvDyXvDZXvE9jTQwom", _index.MoneroNetworkType.MAINNET);
        await _index.MoneroUtils.validateAddress("4JCp7q5SchvMCHVKENnPpM7tRcL5oWMgpMCqQDbhH8UrjDFg2H9i5AQWXuU1qacJgUUCVLTsgDmZKXGz1vPLXY8QFySJXARQWju8AuRN2z", _index.MoneroNetworkType.MAINNET);

        // test mainnet subaddress validation
        await _index.MoneroUtils.validateAddress("891TQPrWshJVpnBR4ZMhHiHpLx1PUnMqa3ccV5TJFBbqcJa3DWhjBh2QByCv3Su7WDPTGMHmCKkiVFN2fyGJKwbM1t6G7Ea", _index.MoneroNetworkType.MAINNET);
        await _index.MoneroUtils.validateAddress("88fyq3t8Gxn1QWMG189EufHtMHXZXkfJtJKFJXqeA4GpSiuyfjVwVyp47PeQJnD7Tc8iK8TDvvhcmEmfh8nx7Va2ToP8wAo", _index.MoneroNetworkType.MAINNET);
        await _index.MoneroUtils.validateAddress("88hnoBiX3TPjbFaQE8RxgyBcf3DtMKZWWQMoArBjQfn37JJwtm568mPX6ipcCuGKDnLCzgjmpLSqce4aBDyapJJAFtNxUMb", _index.MoneroNetworkType.MAINNET);

        // test testnet primary address validation
        await _index.MoneroUtils.validateAddress("9tUBnNCkC3UKGygHCwYvAB1FscpjUuq5e9MYJd2rXuiiTjjfVeSVjnbSG5VTnJgBgy9Y7GTLfxpZNMUwNZjGfdFr1z79eV1", _index.MoneroNetworkType.TESTNET);
        await _index.MoneroUtils.validateAddress("9xZmQa1kYakGoHcfXeBgcsLf622NCpChcACwXxfdgY9uAa9hXSPCV9cLvUsAShfDcFKDdPzCNJ1n5cFGKw5GVM722pjuGPd", _index.MoneroNetworkType.TESTNET);
        await _index.MoneroUtils.validateAddress("A2TXS6QFQ4wEsp8U7C2Y4B7wBtiML8aDG7mdCbRvDQmRaRNj1YSSgJE46fSzUkwgpMUCXFqscvrQuN7oKpP6eDyQ7XuYsuf", _index.MoneroNetworkType.TESTNET);

        // test testnet integrated address validation
        await _index.MoneroUtils.validateAddress("A4AroB2EoJzKGygHCwYvAB1FscpjUuq5e9MYJd2rXuiiTjjfVeSVjnbSG5VTnJgBgy9Y7GTLfxpZNMUwNZjGfdFr2QY5Ba2aHhTEdQa2ra", _index.MoneroNetworkType.TESTNET);
        await _index.MoneroUtils.validateAddress("A8GSRNqF9rGGoHcfXeBgcsLf622NCpChcACwXxfdgY9uAa9hXSPCV9cLvUsAShfDcFKDdPzCNJ1n5cFGKw5GVM723iPoCEF1Fs9BcPYxTW", _index.MoneroNetworkType.TESTNET);
        await _index.MoneroUtils.validateAddress("ACACSuDk1LTEsp8U7C2Y4B7wBtiML8aDG7mdCbRvDQmRaRNj1YSSgJE46fSzUkwgpMUCXFqscvrQuN7oKpP6eDyQAdgDoT3UnMYKQz7SHC", _index.MoneroNetworkType.TESTNET);

        // test testnet subaddress validation
        await _index.MoneroUtils.validateAddress("BgnKzHPJQDcg7xiP7bMN9MfPv9Z8ciT71iEMYnCdgBRBFETWgu9nKTr8fnzyGfU9h9gyNA8SFzYYzHfTS9KhqytSU943Nu1", _index.MoneroNetworkType.TESTNET);
        await _index.MoneroUtils.validateAddress("BZwiuKkoNP59zgPHTxpNw3PM4DW2xiAVQJWqfFRrGyeZ7afVdQqoiJg3E2dDL3Ja8BV4ov2LEoHx9UjzF3W4ihPBSZvWwTx", _index.MoneroNetworkType.TESTNET);
        await _index.MoneroUtils.validateAddress("Bhf1DEYrentcehUvNreLK5gxosnC2VStMXNCCs163RTxQq4jxFYvpw7LrQFmrMwWW2KsXLhMRtyho6Lq11ci3Fb246bxYmi", _index.MoneroNetworkType.TESTNET);

        // test stagenet primary address validation
        await _index.MoneroUtils.validateAddress("5B8s3obCY2ETeQB3GNAGPK2zRGen5UeW1WzegSizVsmf6z5NvM2GLoN6zzk1vHyzGAAfA8pGhuYAeCFZjHAp59jRVQkunGS", _index.MoneroNetworkType.STAGENET);
        await _index.MoneroUtils.validateAddress("57VfotUbSZLG82UkKhWXDjS5ZEK9ZCDcmjdk4gpVq2fbKdEgwRCFrGTLZ2MMdSHphRWJDWVBi5qS8T7dz13JTCWtC228zyn", _index.MoneroNetworkType.STAGENET);
        await _index.MoneroUtils.validateAddress("52FysgWJYmAG73QUQZRULJj2Dv2C2mceUMB5zHqNzMn8WBtfPWQrSUFSQUKTX9r7bUMmVSGbrau976xYLynR8jTWLdA7rfp", _index.MoneroNetworkType.STAGENET);

        // test stagenet integrated address validation
        await _index.MoneroUtils.validateAddress("5LqY4cQh9HkTeQB3GNAGPK2zRGen5UeW1WzegSizVsmf6z5NvM2GLoN6zzk1vHyzGAAfA8pGhuYAeCFZjHAp59jRj6LZRFrjuGK8Whthg2", _index.MoneroNetworkType.STAGENET);
        await _index.MoneroUtils.validateAddress("5HCLphJ63prG82UkKhWXDjS5ZEK9ZCDcmjdk4gpVq2fbKdEgwRCFrGTLZ2MMdSHphRWJDWVBi5qS8T7dz13JTCWtHETX8zcUhDjVKcynf6", _index.MoneroNetworkType.STAGENET);
        await _index.MoneroUtils.validateAddress("5BxetVKoA2gG73QUQZRULJj2Dv2C2mceUMB5zHqNzMn8WBtfPWQrSUFSQUKTX9r7bUMmVSGbrau976xYLynR8jTWVwQwpHNg5fCLgtA2Dv", _index.MoneroNetworkType.STAGENET);

        // test stagenet subaddress validation
        await _index.MoneroUtils.validateAddress("778B5D2JmMh5TJVWFbygJR15dvio5Z5B24hfSrWDzeroM8j8Lqc9sMoFE6324xg2ReaAZqHJkgfGFRugRmYHugHZ4f17Gxo", _index.MoneroNetworkType.STAGENET);
        await _index.MoneroUtils.validateAddress("73U97wGEH9RCVUf6bopo45jSgoqjMzz4mTUsvWs5EusmYAmFcBYFm7wKMVmgtVKCBhMQqXrcMbHvwck2md63jMZSFJxUhQ2", _index.MoneroNetworkType.STAGENET);
        await _index.MoneroUtils.validateAddress("747wPpaPKrjDPZrF48jAfz9pRRUHLMCWfYu2UanP4ZfTG8NrmYrSEWNW8gYoadU8hTiwBjV14e6DLaC5xfhyEpX5154aMm6", _index.MoneroNetworkType.STAGENET);

        // test invalid addresses on mainnet
        await testInvalidAddress(null, _index.MoneroNetworkType.MAINNET);
        await testInvalidAddress("", _index.MoneroNetworkType.MAINNET);
        await testInvalidAddress("42ZxX3Y2y5s4nJ8fdz2w65TrTEp9PRsv5J8iHSShkHQcE2V31FhnWptioNst1K9oeDY4KpWZ7v8V2BZNVa4Wdky89iqmPz2", _index.MoneroNetworkType.MAINNET);
        await testInvalidAddress("41ApvrfMgUFZEePHBZHwuSckQXebuZu299NSmVEmQ41YJZQhKcPyujyMSzpDH4VMMVSBo3U3b54JaNvQLwAjqDhKeGLQ9vfRBRKFKnBtVH", _index.MoneroNetworkType.MAINNET);
        await testInvalidAddress("81fyq3t8Gxn1QWMG189EufHtMHXZXkfJtJKFJXqeA4GpSiuyfjVwVyp47PeQJnD7Tc8iK8TDvvhcmEmfh8nx7Va2ToP8wAo", _index.MoneroNetworkType.MAINNET);

        // test invalid addresses on testnet
        await testInvalidAddress(null, _index.MoneroNetworkType.TESTNET);
        await testInvalidAddress("", _index.MoneroNetworkType.TESTNET);
        await testInvalidAddress("91UBnNCkC3UKGygHCwYvAB1FscpjUuq5e9MYJd2rXuiiTjjfVeSVjnbSG5VTnJgBgy9Y7GTLfxpZNMUwNZjGfdFr1z79eV1", _index.MoneroNetworkType.TESTNET);
        await testInvalidAddress("A1AroB2EoJzKGygHCwYvAB1FscpjUuq5e9MYJd2rXuiiTjjfVeSVjnbSG5VTnJgBgy9Y7GTLfxpZNMUwNZjGfdFr2QY5Ba2aHhTEdQa2ra", _index.MoneroNetworkType.TESTNET);
        await testInvalidAddress("B1nKzHPJQDcg7xiP7bMN9MfPv9Z8ciT71iEMYnCdgBRBFETWgu9nKTr8fnzyGfU9h9gyNA8SFzYYzHfTS9KhqytSU943Nu1", _index.MoneroNetworkType.TESTNET);

        // test invalid addresses on stagenet
        await testInvalidAddress(null, _index.MoneroNetworkType.STAGENET);
        await testInvalidAddress("", _index.MoneroNetworkType.STAGENET);
        await testInvalidAddress("518s3obCY2ETeQB3GNAGPK2zRGen5UeW1WzegSizVsmf6z5NvM2GLoN6zzk1vHyzGAAfA8pGhuYAeCFZjHAp59jRVQkunGS", _index.MoneroNetworkType.STAGENET);
        await testInvalidAddress("51qY4cQh9HkTeQB3GNAGPK2zRGen5UeW1WzegSizVsmf6z5NvM2GLoN6zzk1vHyzGAAfA8pGhuYAeCFZjHAp59jRj6LZRFrjuGK8Whthg2", _index.MoneroNetworkType.STAGENET);
        await testInvalidAddress("718B5D2JmMh5TJVWFbygJR15dvio5Z5B24hfSrWDzeroM8j8Lqc9sMoFE6324xg2ReaAZqHJkgfGFRugRmYHugHZ4f17Gxo", _index.MoneroNetworkType.STAGENET);
      });

      it("Can validate keys", async function () {

        // test private view key validation
        (0, _assert.default)(await _index.MoneroUtils.isValidPrivateViewKey("86cf351d10894769feba29b9e201e12fb100b85bb52fc5825c864eef55c5840d"));
        await testInvalidPrivateViewKey("");
        await testInvalidPrivateViewKey();
        await testInvalidPrivateViewKey("5B8s3obCY2ETeQB3GNAGPK2zRGen5UeW1WzegSizVsmf6z5NvM2GLoN6zzk1vHyzGAAfA8pGhuYAeCFZjHAp59jRVQkunGS");

        // test public view key validation
        (0, _assert.default)(await _index.MoneroUtils.isValidPublicViewKey("99873d76ca874ff1aad676b835dd303abcb21c9911ca8a3d9130abc4544d8a0a"));
        await testInvalidPublicViewKey("");
        await testInvalidPublicViewKey();
        await testInvalidPublicViewKey("z86cf351d10894769feba29b9e201e12fb100b85bb52fc5825c864eef55c5840d");

        // test private spend key validation
        (0, _assert.default)(await _index.MoneroUtils.isValidPrivateSpendKey("e9ba887e93620ef9fafdfe0c6d3022949f1c5713cbd9ef631f18a0fb00421dee"));
        await testInvalidPrivateSpendKey("");
        await testInvalidPrivateSpendKey(null);
        await testInvalidPrivateSpendKey("z86cf351d10894769feba29b9e201e12fb100b85bb52fc5825c864eef55c5840d");

        // test public spend key validation
        (0, _assert.default)(await _index.MoneroUtils.isValidPublicSpendKey("3e48df9e9d8038dbf6f5382fac2becd8686273cda5bd87187e45dca7ec5af37b"));
        await testInvalidPublicSpendKey("");
        await testInvalidPublicSpendKey();
        await testInvalidPublicSpendKey("z86cf351d10894769feba29b9e201e12fb100b85bb52fc5825c864eef55c5840d");
      });

      async function testInvalidAddress(address, networkType) {
        (0, _assert.default)(!(await _index.MoneroUtils.isValidAddress(address, networkType)));
        try {
          await _index.MoneroUtils.validateAddress(address, networkType);
          throw new Error("Should have thrown exception");
        } catch (err) {
          _assert.default.notEqual("Should have thrown exception", err.message);
          (0, _assert.default)(err.message);
        }
      }

      async function testInvalidPrivateViewKey(privateViewKey) {
        (0, _assert.default)(!(await _index.MoneroUtils.isValidPrivateViewKey(privateViewKey)));
        try {
          await _index.MoneroUtils.validatePrivateViewKey(privateViewKey);
          throw new Error("Should have thrown exception");
        } catch (e) {
          (0, _assert.default)(e.message.length > 0);
        }
      }

      async function testInvalidPublicViewKey(publicViewKey) {
        (0, _assert.default)(!(await _index.MoneroUtils.isValidPublicViewKey(publicViewKey)));
        try {
          await _index.MoneroUtils.validatePublicViewKey(publicViewKey);
          throw new Error("Should have thrown exception");
        } catch (e) {
          (0, _assert.default)(e.message.length > 0);
        }
      }

      async function testInvalidPrivateSpendKey(privateSpendKey) {
        (0, _assert.default)(!(await _index.MoneroUtils.isValidPrivateSpendKey(privateSpendKey)));
        try {
          await _index.MoneroUtils.validatePrivateSpendKey(privateSpendKey);
          throw new Error("Should have thrown exception");
        } catch (e) {
          (0, _assert.default)(e.message.length > 0);
        }
      }

      async function testInvalidPublicSpendKey(publicSpendKey) {
        (0, _assert.default)(!(await _index.MoneroUtils.isValidPublicSpendKey(publicSpendKey)));
        try {
          await _index.MoneroUtils.validatePublicSpendKey(publicSpendKey);
          throw new Error("Should have thrown exception");
        } catch (e) {
          (0, _assert.default)(e.message.length > 0);
        }
      }

      it("Can convert between XMR and atomic units", function () {
        _assert.default.equal(_index.MoneroUtils.xmrToAtomicUnits(1).toString(), 1000000000000n.toString());
        _assert.default.equal(_index.MoneroUtils.atomicUnitsToXmr(1000000000000n), 1);
        _assert.default.equal(_index.MoneroUtils.xmrToAtomicUnits(0.001).toString(), 1000000000n.toString());
        _assert.default.equal(_index.MoneroUtils.atomicUnitsToXmr(1000000000n), .001);
        _assert.default.equal(_index.MoneroUtils.xmrToAtomicUnits(.25).toString(), 250000000000n.toString());
        _assert.default.equal(_index.MoneroUtils.atomicUnitsToXmr(250000000000n), .25);
        _assert.default.equal(_index.MoneroUtils.xmrToAtomicUnits(1.25).toString(), 1250000000000n.toString());
        _assert.default.equal(_index.MoneroUtils.atomicUnitsToXmr(1250000000000n), 1.25);
        _assert.default.equal(_index.MoneroUtils.xmrToAtomicUnits("1").toString(), 1000000000000n.toString());
        _assert.default.equal(_index.MoneroUtils.atomicUnitsToXmr(1000000000000n), 1);
        _assert.default.equal(_index.MoneroUtils.xmrToAtomicUnits("0.001").toString(), 1000000000n.toString());
        _assert.default.equal(_index.MoneroUtils.atomicUnitsToXmr(1000000000n), .001);
        _assert.default.equal(_index.MoneroUtils.xmrToAtomicUnits(".25").toString(), 250000000000n.toString());
        _assert.default.equal(_index.MoneroUtils.atomicUnitsToXmr(250000000000n), .25);
        _assert.default.equal(_index.MoneroUtils.xmrToAtomicUnits("1.25").toString(), 1250000000000n.toString());
        _assert.default.equal(_index.MoneroUtils.atomicUnitsToXmr(1250000000000n), 1.25);
      });
    });
  }
}exports.default = TestMoneroUtils;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,